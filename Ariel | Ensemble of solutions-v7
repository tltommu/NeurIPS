{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":70367,"databundleVersionId":9188054,"sourceType":"competition"},{"sourceId":191155259,"sourceType":"kernelVersion"},{"sourceId":196522559,"sourceType":"kernelVersion"}],"dockerImageVersionId":30761,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## This notebook is forked from the work of **[vyacheslavbolotin](https://www.kaggle.com/vyacheslavbolotin) (Notebook link: [Ariel | Ensemble of solutions](https://www.kaggle.com/code/vyacheslavbolotin/ensemble-of-solutions/edit)**).\n\n### Please refer to this notebook for all the detailed solutions.\n\nThis notebook have only filtered out all the commented code and only selected few of the best options up to date.\n\nWhich are option-35, option-34 and option-33 (according to the notebook **Ariel | Ensemble of solutions** linked above.)\n\nAll of the options are stemmed from the work of by **expert [yukiZ](https://www.kaggle.com/hideyukizushi) (Notebook link: [ariel_only_correlation | param upd[LB.517]](https://www.kaggle.com/code/hideyukizushi/ariel-only-correlation-param-upd-lb-517)) and expert [qianc](https://www.kaggle.com/xiaocao123) (Notebook link: [LB=0.545](https://www.kaggle.com/code/xiaocao123/lb-0-545))**\n","metadata":{}},{"cell_type":"markdown","source":"# Submission option","metadata":{}},{"cell_type":"code","source":"#Edit this for submission\nLAUNCH_VARIANT = 'option 36'","metadata":{"execution":{"iopub.status.busy":"2024-09-19T16:06:05.323838Z","iopub.execute_input":"2024-09-19T16:06:05.324605Z","iopub.status.idle":"2024-09-19T16:06:05.329274Z","shell.execute_reply.started":"2024-09-19T16:06:05.324555Z","shell.execute_reply":"2024-09-19T16:06:05.328200Z"},"trusted":true},"execution_count":232,"outputs":[]},{"cell_type":"markdown","source":"## [ariel_only_correlation | param upd[LB.517]](https://www.kaggle.com/code/hideyukizushi/ariel-only-correlation-param-upd-lb-517)\n### [yukiZ](https://www.kaggle.com/hideyukizushi)","metadata":{}},{"cell_type":"markdown","source":"### ℹ️ **Info**\n* **forked original great work kernels**\n    * https://www.kaggle.com/code/sergeifironov/ariel-only-correlation\n\n* **2024/09/08 My Changed**\n    * scipy minimize() param & other params update","metadata":{}},{"cell_type":"markdown","source":"---\n---","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport scipy.stats\nfrom tqdm import tqdm\n\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import r2_score, mean_squared_error\nimport itertools\nfrom scipy.optimize import minimize\nfrom functools import partial\nimport random, os\nfrom astropy.stats import sigma_clip","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:05.331041Z","iopub.execute_input":"2024-09-19T16:06:05.331486Z","iopub.status.idle":"2024-09-19T16:06:05.344734Z","shell.execute_reply.started":"2024-09-19T16:06:05.331445Z","shell.execute_reply":"2024-09-19T16:06:05.343502Z"},"trusted":true},"execution_count":233,"outputs":[]},{"cell_type":"code","source":"test_adc_info = pd.read_csv('/kaggle/input/ariel-data-challenge-2024/test_adc_info.csv',\n                           index_col='planet_id')\naxis_info = pd.read_parquet('/kaggle/input/ariel-data-challenge-2024/axis_info.parquet')","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:05.346472Z","iopub.execute_input":"2024-09-19T16:06:05.346947Z","iopub.status.idle":"2024-09-19T16:06:05.372052Z","shell.execute_reply.started":"2024-09-19T16:06:05.346894Z","shell.execute_reply":"2024-09-19T16:06:05.371075Z"},"trusted":true},"execution_count":234,"outputs":[]},{"cell_type":"code","source":"def apply_linear_corr(linear_corr,clean_signal):\n    linear_corr = np.flip(linear_corr, axis=0)\n    for x, y in itertools.product(\n                range(clean_signal.shape[1]), range(clean_signal.shape[2])\n            ):\n        poli = np.poly1d(linear_corr[:, x, y])\n        clean_signal[:, x, y] = poli(clean_signal[:, x, y])\n    return clean_signal\n\ndef clean_dark(signal, dark, dt):\n    dark = np.tile(dark, (signal.shape[0], 1, 1))\n    signal -= dark* dt[:, np.newaxis, np.newaxis]\n    return signal\n\ndef preproc(dataset, adc_info, sensor, binning = 15):\n    cut_inf, cut_sup = 39, 321\n    sensor_sizes_dict = {\"AIRS-CH0\":[[11250, 32, 356], [1, 32, cut_sup-cut_inf]], \"FGS1\":[[135000, 32, 32], [1, 32, 32]]}\n    binned_dict = {\"AIRS-CH0\":[11250 // binning // 2, 282], \"FGS1\":[135000 // binning // 2]}\n    linear_corr_dict = {\"AIRS-CH0\":(6, 32, 356), \"FGS1\":(6, 32, 32)}\n    planet_ids = adc_info.index\n    \n    feats = []\n    for i, planet_id in tqdm(list(enumerate(planet_ids))):\n        signal = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/{planet_id}/{sensor}_signal.parquet').to_numpy()\n        dark_frame = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/dark.parquet', engine='pyarrow').to_numpy()\n        dead_frame = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/dead.parquet', engine='pyarrow').to_numpy()\n        flat_frame = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/flat.parquet', engine='pyarrow').to_numpy()\n        linear_corr = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/linear_corr.parquet').values.astype(np.float64).reshape(linear_corr_dict[sensor])\n\n        signal = signal.reshape(sensor_sizes_dict[sensor][0]) \n        gain = adc_info[f'{sensor}_adc_gain'].values[i]\n        offset = adc_info[f'{sensor}_adc_offset'].values[i]\n        signal = signal / gain + offset\n        \n        hot = sigma_clip(\n            dark_frame, sigma=8, maxiters=5\n        ).mask\n        \n        if sensor != \"FGS1\":\n            signal = signal[:, :, cut_inf:cut_sup] #11250 * 32 * 282\n            #dt = axis_info['AIRS-CH0-integration_time'].dropna().values\n            dt = np.ones(len(signal))*0.1 \n            dt[1::2] += 4.5 #@bilzard idea\n            linear_corr = linear_corr[:, :, cut_inf:cut_sup]\n            dark_frame = dark_frame[:, cut_inf:cut_sup]\n            dead_frame = dead_frame[:, cut_inf:cut_sup]\n            flat_frame = flat_frame[:, cut_inf:cut_sup]\n            hot = hot[:, cut_inf:cut_sup]\n        else:\n            dt = np.ones(len(signal))*0.1\n            dt[1::2] += 0.1\n            \n        signal = signal.clip(0) #@graySnow idea\n        linear_corr_signal = apply_linear_corr(linear_corr, signal)\n        signal = clean_dark(linear_corr_signal, dark_frame, dt)\n        \n        flat = flat_frame.reshape(sensor_sizes_dict[sensor][1])\n        flat[dead_frame.reshape(sensor_sizes_dict[sensor][1])] = np.nan\n        flat[hot.reshape(sensor_sizes_dict[sensor][1])] = np.nan\n        signal = signal / flat\n        \n        if sensor == \"FGS1\":\n            signal = signal.reshape((sensor_sizes_dict[sensor][0][0], sensor_sizes_dict[sensor][0][1]*sensor_sizes_dict[sensor][0][2]))\n        \n        mean_signal = np.nanmean(signal, axis=1) # mean over the 32*32(FGS1) or 32(CH0) pixels\n        cds_signal = (mean_signal[1::2] - mean_signal[0::2])\n        \n        binned = np.zeros((binned_dict[sensor]))\n        for j in range(cds_signal.shape[0] // binning):\n            binned[j] = cds_signal[j*binning:j*binning+binning].mean(axis=0)\n                   \n        if sensor == \"FGS1\":\n            binned = binned.reshape((binned.shape[0],1))\n            \n        feats.append(binned)\n        \n    return np.stack(feats)\n    \npre_train = np.concatenate([preproc('test', test_adc_info, \"FGS1\", 30*12), preproc('test', test_adc_info, \"AIRS-CH0\", 30)], axis=2)","metadata":{"_kg_hide-input":true,"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-09-19T16:06:05.374480Z","iopub.execute_input":"2024-09-19T16:06:05.375259Z","iopub.status.idle":"2024-09-19T16:06:15.406094Z","shell.execute_reply.started":"2024-09-19T16:06:05.375203Z","shell.execute_reply":"2024-09-19T16:06:15.404904Z"},"trusted":true},"execution_count":235,"outputs":[{"name":"stderr","text":"100%|██████████| 1/1 [00:05<00:00,  5.49s/it]\n100%|██████████| 1/1 [00:04<00:00,  4.51s/it]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### fit polynoms for each sample","metadata":{}},{"cell_type":"code","source":"def phase_detector(signal):\n    phase1, phase2 = None, None\n    best_drop = 0\n    for i in range(50//2,150//2):        \n        t1 = signal[i:i+20//2].max() - signal[i:i+20//2].min()\n        if t1 > best_drop:\n            phase1 = i+(20+5)//2\n            best_drop = t1\n    \n    best_drop = 0\n    for i in range(200//2,250//2):\n        t1 = signal[i:i+20//2].max() - signal[i:i+20//2].min()\n        if t1 > best_drop:\n            phase2 = i-5//2\n            best_drop = t1\n    \n    return phase1, phase2\n\ndef try_s(signal, p1, p2, deg, s):\n    out = list(range(p1-30)) + list(range(p2+30,signal.shape[0]))\n    x, y = out, signal[out].tolist()\n    x = x + list(range(p1,p2))\n\n    y = y + (signal[p1:p2] * (1 + s[0])).tolist()\n    z = np.polyfit(x, y, deg)\n    p = np.poly1d(z)\n    q = np.abs(p(x) - y).mean()\n\n    if s < 1e-4:\n        return q + 1e3\n\n    return q\n    \ndef calibrate_signal(signal):\n    p1,p2 = phase_detector(signal)\n\n    best_deg, best_score = 1, 1e12\n    for deg in range(1, 6):\n        f = partial(try_s, signal, p1, p2, deg)\n        r = minimize(f, [0.001], method = 'Nelder-Mead')\n        s = r.x[0]\n\n        out = list(range(p1-30)) + list(range(p2+30,signal.shape[0]))\n        x, y = out, signal[out].tolist()\n        x = x + list(range(p1,p2))\n        y = y + (signal[p1:p2] * (1 + s)).tolist()\n    \n        z = np.polyfit(x, y, deg)\n        p = np.poly1d(z)\n        q = np.abs(p(x) - y).mean()\n        \n        if q < best_score:\n            best_score = q\n            best_deg = deg\n        \n        print(deg, q)\n            \n    z = np.polyfit(x, y, best_deg)\n    p = np.poly1d(z)\n\n    return s, x, y, p(x)\n\ndef calibrate_train(signal):\n    p1,p2 = phase_detector(signal)\n    \n    best_deg, best_score = 1, 1e12\n    for deg in range(1, 6):\n        f = partial(try_s, signal, p1, p2, deg)\n        r = minimize(f, [0.0001], method = 'Nelder-Mead')\n        s = r.x[0]\n\n        out = list(range(p1-30)) + list(range(p2+30,signal.shape[0]))\n        x, y = out, signal[out].tolist()\n        x = x + list(range(p1,p2))\n        y = y + (signal[p1:p2] * (1 + s)).tolist()\n    \n        z = np.polyfit(x, y, deg)\n        p = np.poly1d(z)\n        q = np.abs(p(x) - y).mean()\n        \n        if q < best_score:\n            best_score = q\n            best_deg = deg\n            \n    z = np.polyfit(x, y, best_deg)\n    p = np.poly1d(z)\n    \n    return s, p(np.arange(signal.shape[0])), p1, p2\n\n\ntrain = pre_train.copy()\nall_s = []\nfor i in range(len(test_adc_info)):\n    signal = train[i,:,1:].mean(axis=1)\n    s, p, p1, p2 = calibrate_train(pre_train[i,:,1:].mean(axis=1))\n    all_s.append(s)\n        \n#copy answer 283 times because we predict mean value\ntrain_s = np.repeat(np.array(all_s), 283).reshape((len(all_s), 283))        \ntrain_sigma = np.ones_like(train_s) * 0.000176","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:15.408095Z","iopub.execute_input":"2024-09-19T16:06:15.408448Z","iopub.status.idle":"2024-09-19T16:06:15.475059Z","shell.execute_reply.started":"2024-09-19T16:06:15.408412Z","shell.execute_reply":"2024-09-19T16:06:15.473979Z"},"trusted":true},"execution_count":236,"outputs":[]},{"cell_type":"markdown","source":"Probably we can accurately estimate sigma from train","metadata":{}},{"cell_type":"code","source":"n = 0\ns, x, y, y_new = calibrate_signal(pre_train[n,:,1:].mean(axis=1))\nplt.scatter(x,y)\nplt.scatter(x,y_new)","metadata":{"_kg_hide-input":true,"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-09-19T16:06:15.476321Z","iopub.execute_input":"2024-09-19T16:06:15.476665Z","iopub.status.idle":"2024-09-19T16:06:15.723046Z","shell.execute_reply.started":"2024-09-19T16:06:15.476629Z","shell.execute_reply":"2024-09-19T16:06:15.722007Z"},"trusted":true},"execution_count":237,"outputs":[{"name":"stdout","text":"1 0.07244680006452496\n2 0.07002299921950764\n3 0.06342300208129605\n4 0.06371088493969411\n5 0.06319975127381998\n","output_type":"stream"},{"execution_count":237,"output_type":"execute_result","data":{"text/plain":"<matplotlib.collections.PathCollection at 0x79a1be7d6a10>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"I call the orange line \"starline\". This is probably what we would see if the planet weren't in the way.","metadata":{}},{"cell_type":"markdown","source":"### Making submission","metadata":{}},{"cell_type":"code","source":"ss = pd.read_csv('/kaggle/input/ariel-data-challenge-2024/sample_submission.csv')\n\npreds = train_s.clip(0)\nsigmas = train_sigma\nsubmission = pd.DataFrame(np.concatenate([preds,sigmas], axis=1), columns=ss.columns[1:])\nsubmission.index = test_adc_info.index\nsubmission.to_csv('submission_7.csv')","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:15.725735Z","iopub.execute_input":"2024-09-19T16:06:15.726132Z","iopub.status.idle":"2024-09-19T16:06:15.752519Z","shell.execute_reply.started":"2024-09-19T16:06:15.726092Z","shell.execute_reply":"2024-09-19T16:06:15.751625Z"},"trusted":true},"execution_count":238,"outputs":[]},{"cell_type":"markdown","source":"## [Ariel Data Challenge 2024](https://www.kaggle.com/code/xiaocao123/ariel-data-challenge-2024)\n### [qianc](https://www.kaggle.com/xiaocao123)","metadata":{}},{"cell_type":"markdown","source":"This notebook is an update of https://www.kaggle.com/code/sergeifironov/ariel-only-correlation\nfrom Sergei Fironov\n\nUpdates :\n- keep 10:22 pixels from the 32 (the image are well centred)\n- Use the derivative for the determination of the beginning and end of the signal during eclipse (idea from Reza R. Choubeh)\n- 'Simplification' of the code for minimize\n- Degree of polyfit <= 4\n- Predictions of test after training Ridge regression with the modelization results (targets predictions with modelization) and the True targets. ","metadata":{}},{"cell_type":"markdown","source":"## [LB=0.545](https://www.kaggle.com/code/xiaocao123/lb-0-545)\n### [qianc](https://www.kaggle.com/xiaocao123)","metadata":{}},{"cell_type":"markdown","source":"#### Notebook from https://www.kaggle.com/code/vyacheslavbolotin/ariel-ensemble-of-solutions\n#### If it is useful to you, please give your like.\n\n#### Below is the link to my other notebook, which is also the first sharer.\n\n#### https://www.kaggle.com/code/xiaocao123/ariel-data-challenge-2024","metadata":{}},{"cell_type":"markdown","source":"This notebook is an update of https://www.kaggle.com/code/sergeifironov/ariel-only-correlation\nfrom Sergei Fironov\n\nUpdates :\n- keep 10:22 pixels from the 32 (the image are well centred)\n- Use the derivative for the determination of the beginning and end of the signal during eclipse (idea from Reza R. Choubeh)\n- 'Simplification' of the code for minimize\n- Degree of polyfit <= 4\n- Predictions of test after training Ridge regression with the modelization results (targets predictions with modelization) and the True targets. ","metadata":{}},{"cell_type":"markdown","source":"### Librairies","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tqdm import tqdm\nimport joblib\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import r2_score, mean_squared_error\nimport itertools\n\nfrom scipy.optimize import minimize\nfrom scipy import optimize\n\nfrom astropy.stats import sigma_clip","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:15.753649Z","iopub.execute_input":"2024-09-19T16:06:15.753973Z","iopub.status.idle":"2024-09-19T16:06:15.759289Z","shell.execute_reply.started":"2024-09-19T16:06:15.753938Z","shell.execute_reply":"2024-09-19T16:06:15.758365Z"},"trusted":true},"execution_count":239,"outputs":[]},{"cell_type":"code","source":"dataset = 'test'\nadc_info = pd.read_csv('/kaggle/input/ariel-data-challenge-2024/'+f'{dataset}_adc_info.csv',index_col='planet_id')\naxis_info = pd.read_parquet('/kaggle/input/ariel-data-challenge-2024/axis_info.parquet')","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:15.760900Z","iopub.execute_input":"2024-09-19T16:06:15.761254Z","iopub.status.idle":"2024-09-19T16:06:15.785037Z","shell.execute_reply.started":"2024-09-19T16:06:15.761219Z","shell.execute_reply":"2024-09-19T16:06:15.784116Z"},"trusted":true},"execution_count":240,"outputs":[]},{"cell_type":"code","source":"def apply_linear_corr(linear_corr,clean_signal):\n    linear_corr = np.flip(linear_corr, axis=0)\n    for x, y in itertools.product(\n                range(clean_signal.shape[1]), range(clean_signal.shape[2])\n            ):\n        poli = np.poly1d(linear_corr[:, x, y])\n        clean_signal[:, x, y] = poli(clean_signal[:, x, y])\n    return clean_signal\n\ndef clean_dark(signal, dark, dt):\n    dark = np.tile(dark, (signal.shape[0], 1, 1))\n    signal -= dark* dt[:, np.newaxis, np.newaxis]\n    return signal\n\ndef preproc(dataset, adc_info, sensor, binning = 15):\n    cut_inf, cut_sup = 39, 321\n    sensor_sizes_dict = {\"AIRS-CH0\":[[11250, 32, 356], [1, 32, cut_sup-cut_inf]], \"FGS1\":[[135000, 32, 32], [1, 32, 32]]}\n    binned_dict = {\"AIRS-CH0\":[11250 // binning // 2, 282], \"FGS1\":[135000 // binning // 2]}\n    linear_corr_dict = {\"AIRS-CH0\":(6, 32, 356), \"FGS1\":(6, 32, 32)}\n    planet_ids = adc_info.index\n    \n    feats = []\n    for i, planet_id in tqdm(list(enumerate(planet_ids))):\n        signal = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/{planet_id}/{sensor}_signal.parquet').to_numpy()\n        dark_frame = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/dark.parquet', engine='pyarrow').to_numpy()\n        dead_frame = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/dead.parquet', engine='pyarrow').to_numpy()\n        flat_frame = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/flat.parquet', engine='pyarrow').to_numpy()\n        linear_corr = pd.read_parquet(f'/kaggle/input/ariel-data-challenge-2024/{dataset}/' + str(planet_id) + '/' + sensor + '_calibration/linear_corr.parquet').values.astype(np.float64).reshape(linear_corr_dict[sensor])\n\n        signal = signal.reshape(sensor_sizes_dict[sensor][0]) \n        gain = adc_info[f'{sensor}_adc_gain'].values[i]\n        offset = adc_info[f'{sensor}_adc_offset'].values[i]\n        signal = signal / gain + offset\n        \n        hot = sigma_clip(\n            dark_frame, sigma=5, maxiters=5\n        ).mask\n        \n        if sensor != \"FGS1\":\n            signal = signal[:, :, cut_inf:cut_sup] \n            dt = np.ones(len(signal))*0.1 \n            dt[1::2] += 4.5 #@bilzard idea\n            linear_corr = linear_corr[:, :, cut_inf:cut_sup]\n            dark_frame = dark_frame[:, cut_inf:cut_sup]\n            dead_frame = dead_frame[:, cut_inf:cut_sup]\n            flat_frame = flat_frame[:, cut_inf:cut_sup]\n            hot = hot[:, cut_inf:cut_sup]\n        else:\n            dt = np.ones(len(signal))*0.1\n            dt[1::2] += 0.1\n            \n        signal = signal.clip(0) #@graySnow idea\n        linear_corr_signal = apply_linear_corr(linear_corr, signal)\n        signal = clean_dark(linear_corr_signal, dark_frame, dt)\n        \n        flat = flat_frame.reshape(sensor_sizes_dict[sensor][1])\n        flat[dead_frame.reshape(sensor_sizes_dict[sensor][1])] = np.nan\n        flat[hot.reshape(sensor_sizes_dict[sensor][1])] = np.nan\n        signal = signal / flat\n        \n        \n        if sensor == \"FGS1\":\n            signal = signal[:,10:22,10:22] # **** updates ****\n            signal = signal.reshape(sensor_sizes_dict[sensor][0][0],144) # # **** updates ****\n\n        if sensor != \"FGS1\":\n            signal = signal[:,10:22,:] # **** updates ****\n\n        mean_signal = np.nanmean(signal, axis=1) \n        cds_signal = (mean_signal[1::2] - mean_signal[0::2])\n        \n        binned = np.zeros((binned_dict[sensor]))\n        for j in range(cds_signal.shape[0] // binning):\n            binned[j] = cds_signal[j*binning:j*binning+binning].mean(axis=0) \n                   \n        if sensor == \"FGS1\":\n            binned = binned.reshape((binned.shape[0],1))\n        \n        feats.append(binned)\n        \n    return np.stack(feats)\n    \npre_train = np.concatenate([preproc(f'{dataset}', adc_info, \"FGS1\", 30*12), preproc(f'{dataset}', adc_info, \"AIRS-CH0\", 30)], axis=2)","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:15.786607Z","iopub.execute_input":"2024-09-19T16:06:15.787129Z","iopub.status.idle":"2024-09-19T16:06:24.554670Z","shell.execute_reply.started":"2024-09-19T16:06:15.787077Z","shell.execute_reply":"2024-09-19T16:06:24.553659Z"},"trusted":true},"execution_count":241,"outputs":[{"name":"stderr","text":"100%|██████████| 1/1 [00:04<00:00,  4.63s/it]\n100%|██████████| 1/1 [00:04<00:00,  4.10s/it]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Modelization","metadata":{}},{"cell_type":"code","source":"def phase_detector(signal):\n    \n    MIN = np.argmin(signal[30:140])+30\n    signal1 = signal[:MIN ]\n    signal2 = signal[MIN :]\n\n    first_derivative1 = np.gradient(signal1)\n    first_derivative1 /= first_derivative1.max()\n    first_derivative2 = np.gradient(signal2)\n    first_derivative2 /= first_derivative2.max()\n\n    phase1 = np.argmin(first_derivative1)\n    phase2 = np.argmax(first_derivative2) + MIN\n\n    return phase1, phase2\n    \ndef objective(s):\n    \n    best_q = 1e10\n    for i in range(4) :\n        delta = 2\n        x = list(range(signal.shape[0]-delta*4))\n        y = signal[:p1-delta].tolist() + (signal[p1+delta:p2 - delta] * (1 + s)).tolist() + signal[p2+delta:].tolist()\n        \n        z = np.polyfit(x, y, deg=i)\n        p = np.poly1d(z)\n        q = np.abs(p(x) - y).mean()\n    \n    if q < best_q :\n        best_q = q\n    \n    return q\n\n\nall_s = []\nfor i in tqdm(range(len(adc_info))):\n    \n    signal = pre_train[i,:,1:].mean(axis=1)\n    p1,p2 = phase_detector(signal)\n \n    r = minimize(\n                objective,\n                [0.0001],\n                method= 'Nelder-Mead'\n                  )\n    s = r.x[0]\n    all_s.append(s)\n    \nall_s = np.repeat(np.array(all_s), 283).reshape((len(all_s), 283))        ","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:24.556042Z","iopub.execute_input":"2024-09-19T16:06:24.556418Z","iopub.status.idle":"2024-09-19T16:06:24.604109Z","shell.execute_reply.started":"2024-09-19T16:06:24.556382Z","shell.execute_reply":"2024-09-19T16:06:24.603077Z"},"trusted":true},"execution_count":242,"outputs":[{"name":"stderr","text":"100%|██████████| 1/1 [00:00<00:00, 30.82it/s]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Submission","metadata":{}},{"cell_type":"code","source":"ss = pd.read_csv('/kaggle/input/ariel-data-challenge-2024/sample_submission.csv')\nsigma = np.ones_like(all_s) * 0.0001422 \npred = all_s.clip(0) \nsubmission = pd.DataFrame(np.concatenate([pred,sigma], axis=1), columns=ss.columns[1:])\nsubmission.index = adc_info.index\nsubmission.to_csv('submission_91.csv')\nsubmission","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-09-19T16:06:24.605572Z","iopub.execute_input":"2024-09-19T16:06:24.606005Z","iopub.status.idle":"2024-09-19T16:06:24.646489Z","shell.execute_reply.started":"2024-09-19T16:06:24.605956Z","shell.execute_reply":"2024-09-19T16:06:24.645484Z"},"trusted":true},"execution_count":243,"outputs":[{"execution_count":243,"output_type":"execute_result","data":{"text/plain":"               wl_1      wl_2      wl_3      wl_4      wl_5      wl_6  \\\nplanet_id                                                               \n499191466  0.002725  0.002725  0.002725  0.002725  0.002725  0.002725   \n\n               wl_7      wl_8      wl_9     wl_10  ...  sigma_274  sigma_275  \\\nplanet_id                                          ...                         \n499191466  0.002725  0.002725  0.002725  0.002725  ...   0.000142   0.000142   \n\n           sigma_276  sigma_277  sigma_278  sigma_279  sigma_280  sigma_281  \\\nplanet_id                                                                     \n499191466   0.000142   0.000142   0.000142   0.000142   0.000142   0.000142   \n\n           sigma_282  sigma_283  \nplanet_id                        \n499191466   0.000142   0.000142  \n\n[1 rows x 566 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wl_1</th>\n      <th>wl_2</th>\n      <th>wl_3</th>\n      <th>wl_4</th>\n      <th>wl_5</th>\n      <th>wl_6</th>\n      <th>wl_7</th>\n      <th>wl_8</th>\n      <th>wl_9</th>\n      <th>wl_10</th>\n      <th>...</th>\n      <th>sigma_274</th>\n      <th>sigma_275</th>\n      <th>sigma_276</th>\n      <th>sigma_277</th>\n      <th>sigma_278</th>\n      <th>sigma_279</th>\n      <th>sigma_280</th>\n      <th>sigma_281</th>\n      <th>sigma_282</th>\n      <th>sigma_283</th>\n    </tr>\n    <tr>\n      <th>planet_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>499191466</th>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>0.002725</td>\n      <td>...</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n      <td>0.000142</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 566 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Submission\n","metadata":{}},{"cell_type":"code","source":"# Option 35 LB 0.545(highest), freq = 0.002724, sigma = 0.000143\nif LAUNCH_VARIANT == 'option 35': \n    df_solution_x = pd.read_csv('submission_7.csv')\n    df_solution_7 = pd.read_csv('submission_7.csv')\n    df_solution_9 = pd.read_csv('submission_91.csv')\n    df_solution_7 = df_solution_7.map(lambda x:x*0.031)\n    df_solution_9 = df_solution_9.map(lambda x:x*0.97)\n    df_temp = df_solution_7.add(df_solution_9)\n    df_submission = df_temp.map(lambda x:x)\n    df_submission['planet_id'] = df_solution_x['planet_id']\n    \n# Option 36 Edit this for new submission\nelif LAUNCH_VARIANT == 'option 36':\n    df_solution_x = pd.read_csv('submission_7.csv')\n    df_solution_7 = pd.read_csv('submission_7.csv')\n    df_solution_9 = pd.read_csv('submission_91.csv')\n    df_solution_7 = df_solution_7.map(lambda x:x*(-0.03))\n    df_solution_9 = df_solution_9.map(lambda x:x*0.969)\n    df_temp = df_solution_9.sub(df_solution_7)\n    df_submission = df_temp.map(lambda x:x)\n    df_submission['planet_id'] = df_solution_x['planet_id']\n    \n# Option 37 LB unknown, freq = 0.002809, sigma = 0.000102\nelif LAUNCH_VARIANT == 'option 37':\n    df_solution_x = pd.read_csv('submission_7.csv')\n    df_solution_7 = pd.read_csv('submission_7.csv')\n    df_solution_9 = pd.read_csv('submission_91.csv')\n    df_solution_7 = df_solution_7.map(lambda x:x*1.2)\n    df_solution_9 = df_solution_9.map(lambda x:x*2.2)\n    df_temp = df_solution_9.sub(df_solution_7)\n    df_submission = df_temp.map(lambda x:x)\n    df_submission['planet_id'] = df_solution_x['planet_id']\n    \n#  Option 38 LB unknown, freq = 0.004781, sigma = 0.000279\nelif LAUNCH_VARIANT == 'option 38':\n    df_solution_x = pd.read_csv('submission_7.csv')\n    df_solution_7 = pd.read_csv('submission_7.csv')\n    df_solution_9 = pd.read_csv('submission_91.csv')\n    df_solution_7 = df_solution_7.map(lambda x:x*0.8)\n    df_solution_9 = df_solution_9.map(lambda x:x*0.975)\n    df_temp = df_solution_7.add(df_solution_9)\n    df_submission = df_temp.map(lambda x:x)\n    df_submission['planet_id'] = df_solution_x['planet_id']\n    \n# Option 39 LB unknown, freq = 0.00272, sigma = 0.000143\nelif LAUNCH_VARIANT == 'option 39':\n    df_solution_x = pd.read_csv('submission_7.csv')\n    df_solution_7 = pd.read_csv('submission_7.csv')\n    df_solution_9 = pd.read_csv('submission_91.csv')\n    df_solution_7 = df_solution_7.map(lambda x:x*(-0.03))\n    df_solution_9 = df_solution_9.map(lambda x:x*0.969)\n    df_temp = df_solution_9.sub(df_solution_7)\n    df_submission = df_temp.map(lambda x:x)\n    df_submission['planet_id'] = df_solution_x['planet_id']\n    \ndf_submission.to_csv('submission.csv', index=False, float_format='%.7f')\ndf_submission","metadata":{"execution":{"iopub.status.busy":"2024-09-19T16:06:24.649051Z","iopub.execute_input":"2024-09-19T16:06:24.649403Z","iopub.status.idle":"2024-09-19T16:06:24.807122Z","shell.execute_reply.started":"2024-09-19T16:06:24.649367Z","shell.execute_reply":"2024-09-19T16:06:24.806096Z"},"trusted":true},"execution_count":244,"outputs":[{"execution_count":244,"output_type":"execute_result","data":{"text/plain":"   planet_id     wl_1     wl_2     wl_3     wl_4     wl_5     wl_6     wl_7  \\\n0  499191466  0.00272  0.00272  0.00272  0.00272  0.00272  0.00272  0.00272   \n\n      wl_8     wl_9  ...  sigma_274  sigma_275  sigma_276  sigma_277  \\\n0  0.00272  0.00272  ...   0.000143   0.000143   0.000143   0.000143   \n\n   sigma_278  sigma_279  sigma_280  sigma_281  sigma_282  sigma_283  \n0   0.000143   0.000143   0.000143   0.000143   0.000143   0.000143  \n\n[1 rows x 567 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>planet_id</th>\n      <th>wl_1</th>\n      <th>wl_2</th>\n      <th>wl_3</th>\n      <th>wl_4</th>\n      <th>wl_5</th>\n      <th>wl_6</th>\n      <th>wl_7</th>\n      <th>wl_8</th>\n      <th>wl_9</th>\n      <th>...</th>\n      <th>sigma_274</th>\n      <th>sigma_275</th>\n      <th>sigma_276</th>\n      <th>sigma_277</th>\n      <th>sigma_278</th>\n      <th>sigma_279</th>\n      <th>sigma_280</th>\n      <th>sigma_281</th>\n      <th>sigma_282</th>\n      <th>sigma_283</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>499191466</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>0.00272</td>\n      <td>...</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n      <td>0.000143</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 567 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Sidenote: \n### I actually don't know what I am doing(I just realized the orginal operations was just taking a proportions of one result and adding it to another)\n\n#### I alternated the operation from addition to subtraction and see what I would get.\n#### I don't know why alternating the proportion of the weight at (0.031+0.97) have yielded me a better result than the author.\n**Maybe I am wrong, but I am sure the weight should not be above 1. However the latest score suggest otherwise, perhaps we are missing something from the dataset and hence such ridiculous result occured.**","metadata":{}}]}